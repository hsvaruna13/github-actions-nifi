# This is a basic workflow to help you get started with Actions

name: prod-deploy

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: [self-hosted, prod]
    environment: prod
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          kubectl delete pod git-sync-test-0
          while [[ $(kubectl get pods git-sync-test-0 -o 'jsonpath={..status.conditions[?(@.type=="Ready")].status}') != "True" ]]; do echo "waiting for pod" && sleep 1; done
          kubectl exec nifi-1635682238-0 -- bash "
          ${NIFI_TOOLKIT_HOME}/bin/cli.sh nifi pg-list -ot json -u http://$(hostname -f):8080 > pgList.json
          export pgId=$(jq --arg name "testing" '.[] | select(.name==$name) | .id' pgList.json)
          && ${NIFI_TOOLKIT_HOME}/bin/cli.sh registry list-buckets -ot json -u http://nifi-reg-service:18080 > buckets.json
          && export bucketId=$(jq --arg name "test" '.[] | select(.name==$name) | .identifier' buckets.json)
          && ${NIFI_TOOLKIT_HOME}/bin/cli.sh registry list-flows -b ${bucketId} -ot json -u http://nifi-reg-service:18080 > flows.json
          && export flowId=$(jq --arg name "flow1" '.[] | select(.name==$name) | .identifier' flows.json)
          && ${NIFI_TOOLKIT_HOME}/bin/cli.sh registry list-flow-versions -f ${flowId} -ot json -u http://nifi-reg-service:18080 > flowVer.json
          && export latestVer=$(jq '.[] | .version' flowVer.json | sort -nr | head -n 1)
          && ${NIFI_TOOLKIT_HOME}/bin/cli.sh nifi pg-change-version -pgid ${pgId} -fv ${latestVer} -u http://$(hostname -f):8080
          && rm -rf pgList.json buckets.json flows.json flowVer.json"
